const { config } = global.GoatBot;
const { writeFileSync } = require("fs-extra");

module.exports = {
    config: {
        name: "owner",
        version: "1.5",
        author: "NTKhang",
        countDown: 5,
        role: 0,
        shortDescription: {
            vi: "Th√™m, x√≥a, s·ª≠a quy·ªÅn author",
            en: "Add, remove, edit author role"
        },
        longDescription: {
            vi: "Th√™m, x√≥a, s·ª≠a quy·ªÅn author",
            en: "Add, remove, edit author role"
        },
        category: "admin",
        guide: {
            vi: '   {pn} [add | -a] <uid | @tag>: Th√™m quy·ªÅn author cho ng∆∞·ªùi d√πng'
                + '\n    {pn} [remove | -r] <uid | @tag>: X√≥a quy·ªÅn author c·ªßa ng∆∞·ªùi d√πng'
                + '\n    {pn} [list | -l]: Li·ªát k√™ danh s√°ch author',
            en: '   {pn} [add | -a] <uid | @tag>: Add author role for user'
                + '\n    {pn} [remove | -r] <uid | @tag>: Remove author role of user'
                + '\n    {pn} [list | -l]: List all authors'
        }
    },

    langs: {
        vi: {
            added: "‚úÖ | ƒê√£ th√™m quy·ªÅn author cho %1 ng∆∞·ªùi d√πng:\n%2",
            alreadyAdmin: "\n‚ö†Ô∏è | %1 ng∆∞·ªùi d√πng ƒë√£ c√≥ quy·ªÅn author t·ª´ tr∆∞·ªõc r·ªìi:\n%2",
            missingIdAdd: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p ID ho·∫∑c tag ng∆∞·ªùi d√πng mu·ªën th√™m quy·ªÅn author",
            removed: "‚úÖ | ƒê√£ x√≥a quy·ªÅn author c·ªßa %1 ng∆∞·ªùi d√πng:\n%2",
            notAdmin: "‚ö†Ô∏è | %1 ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn author:\n%2",
            missingIdRemove: "‚ö†Ô∏è | Vui l√≤ng nh·∫≠p ID ho·∫∑c tag ng∆∞·ªùi d√πng mu·ªën x√≥a quy·ªÅn author",
            listAdmin: "üëë | Danh s√°ch author:\n%1",
            listOwners: "üëë | Danh s√°ch owner:\n%1"
        },
        en: {
            added: "‚úÖ | Added owner role for %1 users:\n%2",
            alreadyAdmin: "\n‚ö†Ô∏è | %1 users already have owner role:\n%2",
            missingIdAdd: "‚ö†Ô∏è | Please enter ID or tag user to add author role",
            removed: "‚úÖ | Removed owner role of %1 users:\n%2",
            notAdmin: "‚ö†Ô∏è | %1 users don't have owner role:\n%2",
            missingIdRemove: "‚ö†Ô∏è | Please enter ID or tag user to remove author role",
            listAdmin: "üëë | List of author:\n%1",
            listOwners: "üëë | List of owners role\n\n%1"
        }
    },

    onStart: async function ({ message, args, usersData, event, getLang, api }) {
        const permission = global.GoatBot.config.GOD;

        // Check if the sender is in the list of owners (admins)
        const isOwner = permission.includes(event.senderID);

        switch (args[0]) {
            case "add":
            case "-a": {
                // Only owners can add others as owners
                if (isOwner) {
                    if (args[1]) {
                        let uids = [];
                        if (Object.keys(event.mentions).length > 0) {
                            uids = Object.keys(event.mentions);
                        } else if (event.messageReply) {
                            uids.push(event.messageReply.senderID);
                        } else {
                            uids = args.filter(arg => !isNaN(arg));
                        }

                        const notAdminIds = [];
                        const authorIds = [];
                        for (const uid of uids) {
                            if (config.GOD.includes(uid)) {
                                authorIds.push(uid);
                            } else {
                                notAdminIds.push(uid);
                            }
                        }

                        config.GOD.push(...notAdminIds);
                        const getNames = await Promise.all(uids.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));
                        writeFileSync(global.client.dirConfig, JSON.stringify(config, null, 2));
                        return message.reply(
                            (notAdminIds.length > 0 ? getLang("added", notAdminIds.length, getNames.map(({ uid, name }) => `‚Ä¢ ${name} (${uid})`).join("\n")) : "")
                            + (authorIds.length > 0 ? getLang("alreadyAdmin", authorIds.length, authorIds.map(uid => `‚Ä¢ ${uid}`).join("\n")) : "")
                        );
                    } else {
                        return message.reply(getLang("missingIdAdd"));
                    }
                } else {
                    // If not an owner, deny permission
                    return message.reply(getLang("notAdmin", 1, event.senderID));
                }
            }
            case "remove":
            case "-r": {
                // Only owners can remove others from the owner list
                if (isOwner) {
                    if (args[1]) {
                        let uids = [];
                        if (Object.keys(event.mentions).length > 0) {
                            uids = Object.keys(event.mentions);
                        } else {
                            uids = args.filter(arg => !isNaN(arg));
                        }

                        const notAdminIds = [];
                        const authorIds = [];
                        for (const uid of uids) {
                            if (config.GOD.includes(uid)) {
                                authorIds.push(uid);
                            } else {
                                notAdminIds.push(uid);
                            }
                        }

                        for (const uid of authorIds) {
                            config.GOD.splice(config.GOD.indexOf(uid), 1);
                        }

                        const getNames = await Promise.all(authorIds.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));
                        writeFileSync(global.client.dirConfig, JSON.stringify(config, null, 2));
                        return message.reply(
                            (authorIds.length > 0 ? getLang("removed", authorIds.length, getNames.map(({ uid, name }) => `‚Ä¢ ${name} (${uid})`).join("\n")) : "")
                            + (notAdminIds.length > 0 ? getLang("notAdmin", notAdminIds.length, notAdminIds.map(uid => `‚Ä¢ ${uid}`).join("\n")) : "")
                        );
                    } else {
                        return message.reply(getLang("missingIdRemove"));
                    }
                } else {
                    // If not an owner, deny permission
                    return message.reply(getLang("notAdmin", 1, event.senderID));
                }
            }
            case "list":
            case "-l": {
                // List of owners is now available for everyone (normal users too)
                const getNames = await Promise.all(config.GOD.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));
                return message.reply(getLang("listOwners", getNames.map(({ uid, name }) => `‚ï≠‚Ä£Name: ${name} üëë\n‚ï∞‚Ä£Uid: ${uid}\n`).join("\n")));
            }
            default:
                return message.SyntaxError();
        }
    }
};
