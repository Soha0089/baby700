const axios = require("axios");
const rubishapi = global.GoatBot.config.rubishapi;

module.exports = {
  config: {
    name: "sam1",
    version: "3.0",
    author: "RUBISH",
    shortDescription: "AI CHAT",
    longDescription: {
      vi: "Chat with simma",
      en: "Chat with simma",
    },
    category: "ai",
    guide: {
      en: `
{pn} Hi : chat with simma

{pn} teach <original word> - <response>: Teach Simsimi how to respond to the original word.

{pn} <original word>: Simsimi will respond based on the original word.

Example:

{pn} teach hello - Hi there

{pn} <original word>: Simsimi will respond based on the original word.

{pn} stats: Display statistics on the number of responses and original words.`,
    },
  },

  onReply: async function ({ api, event }) {
    if (event.type === "message_reply") {
      const reply = event.body?.toLowerCase();
      if (isNaN(reply)) {
        try {
          const { data } = await axios.get(`${rubishapi}/chat`, {
            params: { query: reply, apikey: "rubish69" },
          });
          const responseMessage = data.response;
          await api.sendMessage(
            responseMessage,
            event.threadID,
            (error, info) => {
              global.GoatBot.onReply.set(info.messageID, {
                commandName: this.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID,
                link: responseMessage,
              });
            },
            event.messageID
          );
        } catch (error) {
          console.error(error);
        }
      }
    }
  },

  onStart: async function ({ api, args, event }) {
    const { threadID, messageID, senderID } = event;
    const [command, ...restArgs] = args;
    const tid = threadID;
    const mid = messageID;
    const uid = senderID;

    if (command === "teach") {
      const [ask, ans] = restArgs
        .join(" ")
        .split("-")
        .map((item) => item.trim());
      if (!ask || !ans)
        return api.sendMessage(
          'тЪа | Both the question and response are required and should be separated by " - ".',
          tid,
          mid
        );

      try {
        const { data } = await axios.get(`${rubishapi}/teach`, {
          params: { query: ask, response: ans, apikey: "rubish69" },
        });
        const responseMessage = data.message || "Successfully taught simma.";
        return api.sendMessage(responseMessage, tid, mid);
      } catch (error) {
        console.error("Error occurred while teaching", error.message);
        return api.sendMessage(
          "I couldn't learn that. Please try again later.",
          tid,
          mid
        );
      }
    }

    if (command === "stats" || command === "list") {
      try {
        const { data } = await axios.get(`${rubishapi}/stats`, {
          params: { apikey: "rubish69" },
        });
        const responseMessage =
          data.stats || "тЬЕ | Fetched the stats successfully.";
        api.sendMessage(responseMessage, tid);
      } catch (error) {
        console.error("Error occurred while fetching stats", error.message);
        api.sendMessage(
          "тЪая╕П | Failed to fetch the stats. Please try again later.",
          tid
        );
      }
    } else {
      try {
        const rubish = args.join(" ").toLowerCase();
        if (!rubish) {
          api.sendMessage("Hello I'm Simma\n\nHow can I assist you?", tid, mid);
          return;
        }
        const { data } = await axios.get(`${rubishapi}/chat`, {
          params: { query: rubish, apikey: "rubish69" },
        });
        const responseMessage = data.response;
        await api.sendMessage(
          responseMessage,
          tid,
          (error, info) => {
            global.GoatBot.onReply.set(info.messageID, {
              commandName: this.config.name,
              type: "reply",
              messageID: info.messageID,
              author: senderID,
              link: responseMessage,
            });
          },
          mid
        );
      } catch (error) {
        console.error(`Failed to get an answer: ${error.message}`);
        api.sendMessage(`${error.message}.\nAn error`, tid, mid);
      }
    }
  },
  onChat: async function ({ api, event }) {
    var tl = [
      "babu khuda lagseЁЯе║",
      "Hop bedaЁЯШ╛,Boss ржмрж▓ bossЁЯШ╝",
      "ржЖржорж╛ржХрзЗ ржбрж╛ржХрж▓рзЗ ,ржЖржорж┐ ржХрж┐ржирзНрждрзВ ржХрж┐рж╕ ржХрж░рзЗ ржжрзЗржмрзЛЁЯШШ ",
      "ЁЯРТЁЯРТЁЯРТ",
      "bye",
      "naw messaтБжge daw m.me/mahтБйmud.x07",
      "mb ney bye",
      "meww",
      "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯднЁЯдП",
      "ЁЭЧЬ ЁЭЧ╣ЁЭЧ╝ЁЭШГЁЭЧ▓ ЁЭШЖЁЭЧ╝ЁЭШВ__ЁЯШШЁЯШШ",
      "ЁЭЧЬ ЁЭЧ╡ЁЭЧоЁЭШБЁЭЧ▓ ЁЭШЖЁЭЧ╝ЁЭШВ__ЁЯШПЁЯШП",
      "ржЧрзЛрж╕рж▓ ржХрж░рзЗ ржЖрж╕рзЛ ржпрж╛ржУЁЯШСЁЯШй",
      "ржЕрзНржпрж╛рж╕рж▓рж╛ржоржУржпрж╝рж╛рж▓рж┐ржХрзБржо",
      "ржХрзЗржоржи ржЖрж╕рзЛ",
      "ржмрж▓рзЗржи sir__ЁЯШМ",
      "ржмрж▓рзЗржи ржорзНржпрж╛ржбрж╛ржо__ЁЯШМ",
      "ржЖржорж┐ ржЕржирзНржпрзЗрж░ ржЬрж┐ржирж┐рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛__ЁЯШПржУржХрзЗ",
      "ЁЯЩВЁЯЩВЁЯЩВ",
      "ржПржЯрж╛ржпрж╝ ржжрзЗржЦрж╛рж░ ржмрж╛ржХрж┐ рж╕рж┐рж▓рзЛ_ЁЯЩВЁЯЩВЁЯЩВ",
      "ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧпЁЭЧ╝ЁЭЧ╣ЁЭЧ╣ЁЭЧо ЁЭЧ╜ЁЭЧоЁЭЧ╜ ЁЭЧ╡ЁЭЧ╝ЁЭЧ╢ЁЭЧпЁЭЧ╝,,ЁЯШТЁЯШТ",
      "ЁЭЧзЁЭЧоЁЭЧ┐ЁЭЧ╜ЁЭЧ╝ЁЭЧ┐ ЁЭЧпЁЭЧ╝ЁЭЧ╣ЁЭЧ╝_ЁЯЩВ",
      "ЁЭЧХЁЭЧ▓ЁЭШАЁЭЧ╡ЁЭЧ╢ ЁЭЧ▒ЁЭЧоЁЭЧ╕ЁЭЧ╣ЁЭЧ▓ ЁЭЧоЁЭЧ║ЁЭЧ║ЁЭШВ ЁЭЧпЁЭЧ╝ЁЭЧ╕ЁЭЧо ЁЭЧ▒ЁЭЧ▓ЁЭЧпЁЭЧо ЁЭШБЁЭЧ╝__ЁЯе║",
      "ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржЬрж╛ржирзБ, ржмрж▓ ЁЯШМ",
      "ржмрзЗрж╢рж┐ bby Bbby ржХрж░рж▓рзЗ leave ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБ ЁЯШТЁЯШТ",
      "__ржмрзЗрж╢рж┐ ржмрзЗржмрж┐ ржмрж▓рж▓рзЗ ржХрж╛ржорзБрж░ ржжрж┐ржорзБ ЁЯднЁЯдн",
      "ЁЭЩПЁЭЩкЁЭЩвЁЭЩЦЁЭЩз ЁЭЩЬЁЭЩЫ ЁЭЩгЁЭЩЦЁЭЩЮ, ЁЭЩйЁЭЩЦЁЭЩо ЁЭЩЦЁЭЩвЁЭЩа ЁЭЩЩЁЭЩЦЁЭЩаЁЭЩиЁЭЩд? ЁЯШВЁЯШВЁЯШВ",
      "bolo babyЁЯШТ",
      "рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛ ,рждрзЛ ржЖржорж┐ ржХрзЛржирзЛ рж╢рзБржиржмрзЛ ?ЁЯдФЁЯШВ",
      "ржЖржорж┐ рждрзЛ ржЕржирзНржз ржХрж┐ржЫрзБ ржжрзЗржЦрж┐ ржирж╛ЁЯР╕ ЁЯШО",
      "ржЖржо ржЧрж╛ржЫрзЗ ржЖржо ржирж╛ржЗ ржврж┐рж▓ ржХрзЗржи ржорж╛рж░рзЛ, рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржкрзНрж░рзЗржо ржирж╛ржЗ ржмрзЗржмрж┐ ржХрзЗржи ржбрж╛ржХрзЛ ЁЯШТЁЯлг",
      "ЁЭЧ╝ЁЭЧ╢ЁЭЧ╢ ржШрзБржорж╛ржирзЛрж░ ржЖржЧрзЗ.! рждрзЛржорж╛рж░ ржоржиржЯрж╛ ржХржерж╛ржпрж╝ рж░рзЗржЦрзЗ ржШрзБржорж╛ржУ.!ЁЯдФ_ржирж╛рж╣ ржорж╛ржирзЗ ржЪрзБрж░рж┐ ржХрж░рждрж╛ржо ЁЯШЮЁЯШШ",
      "ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржмрж▓рзЗ ЁЭЧХЁЭЧ╝ЁЭШД ржмрж▓рзЛ ЁЯШШ",
      "ржжрзВрж░рзЗ ржпрж╛, рждрзЛрж░ ржХрзЛржирзЛ ржХрж╛ржЬ ржирж╛ржЗ, рж╢рзБржзрзБ ЁЭЧпЁЭЧпЁЭШЖ ЁЭЧпЁЭЧпЁЭШЖ ржХрж░рж┐рж╕  ЁЯШЙЁЯШЛЁЯдг",
      "ржПржЗ ржПржЗ рждрзЛрж░ ржкрж░рзАржХрзНрж╖рж╛ ржХржмрзЗ? рж╢рзБржзрзБ ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧпЁЭЧпЁЭШЖ ржХрж░рж┐рж╕ ЁЯШ╛",
      "рждрзЛрж░рж╛ ржпрзЗ рж╣рж╛рж░рзЗ ЁЭЧХЁЭЧпЁЭШЖ ржбрж╛ржХржЫрж┐рж╕ ржЖржорж┐ рждрзЛ рж╕рждрзНржпрж┐ ржмрж╛ржЪрзНржЪрж╛ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЛ_тШ╣ЁЯШС",
      "ржЖржЬржм рждрзЛ__ЁЯШТ",
      "ржЖржорж╛ржХрзЗ ржбрзЗржХрзЛ ржирж╛,ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ЁЯЩЖЁЯП╗тАНтЩАя╕П",
      "ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рж▓рзЗ ржЪрж╛ржХрж░рж┐ ржерж╛ржХржмрзЗ ржирж╛",
      "ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржХрж░рзЗ ржЖржорж╛рж░ ржмрж╕ ржорж╛ржирзЗ, MahMUD ,MahMUD ржУ рждрзЛ ржХрж░рждрзЗ ржкрж╛рж░рзЛЁЯШС?",
      "ржЖржорж╛рж░ рж╕рзЛржирж╛рж░ ржмрж╛ржВрж▓рж╛, рждрж╛рж░ржкрж░рзЗ рж▓рж╛ржЗржи ржХрж┐? ЁЯЩИ",
      "ЁЯН║ ржПржЗ ржирж╛ржУ ржЬрзБрж╕ ржЦрж╛ржУ..!ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рждрзЗ ржмрж▓рждрзЗ рж╣рж╛ржкрж╛ржпрж╝ ржЧрзЗржЫрзЛ ржирж╛ ЁЯе▓",
      "рж╣ржЯрж╛рзО ржЖржорж╛ржХрзЗ ржоржирзЗ ржкржбрж╝рж▓рзЛ ЁЯЩД",
      "ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЪрзНржЫрж┐ржЫ,ЁЯШ░ЁЯШ┐",
      "ржЖржорж┐ рждрзЛржорж╛рж░ рж╕рж┐ржирж┐ржпрж╝рж░ ржЖржкрзБ ржУржХрзЗ ЁЯШ╝рж╕ржорзНржорж╛ржи ржжрзЗржУЁЯЩБ",
      "ржЦрж╛ржУржпрж╝рж╛ ржжрж╛ржУржпрж╝рж╛ ржХрж░рж╕рзЛ ЁЯЩД",
      "ржПржд ржХрж╛ржЫрзЗржУ ржПрж╕рзЛ ржирж╛,ржкрзНрж░рзЗржо ржП ржкрж░рзЗ ржпрж╛ржмрзЛ рждрзЛ ЁЯЩИ",
      "ржЖрж░рзЗ ржЖржорж┐ ржоржЬрж╛ ржХрж░рж╛рж░ mood ржП ржирж╛ржЗЁЯШТ",
      "ЁЭЧЫЁЭЧ▓ЁЭШЖ ЁЭЧЫЁЭЧоЁЭЧ╗ЁЭЧ▒ЁЭШАЁЭЧ╝ЁЭЧ║ЁЭЧ▓ ржмрж▓рзЛ ЁЯШБЁЯШБ",
      "ржЖрж░рзЗ Bolo ржЖржорж╛рж░ ржЬрж╛ржи, ржХрзЗржоржи ржЖрж╕рзЛ? ЁЯШЪ",
      "ржПржХржЯрж╛ BF ржЦрзБржБржЬрзЗ ржжрж╛ржУ ЁЯШ┐",
      "ржлрзНрж░рзЗржирзНржб рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржжрж┐рж▓рзЗ рзл ржЯрж╛ржХрж╛ ржжрж┐ржмрзЛ ЁЯШЧ",
      "oi mama ar dakis na pilis ЁЯШ┐",
      "ЁЯРдЁЯРд",
      "__ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗ  ржпрж╛ржУ ЁЯШСЁЯШТ",
      "ржПржоржмрж┐ ржХрж┐ржирзЗ ржжрж╛ржУ ржирж╛_ЁЯе║ЁЯе║",
      "ржУржЗ ржорж╛ржорж╛_ржЖрж░ ржбрж╛ржХрж┐рж╕ ржирж╛ ржкрзНрж▓рж┐ржЬ",
      "рзйрзи рждрж╛рж░рж┐ржЦ ржЖржорж╛рж░ ржмрж┐ржпрж╝рзЗ ЁЯРд",
      "рж╣рж╛ ржмрж▓рзЛЁЯШТ,ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ЁЯШРЁЯШС?",
      "ржмрж▓рзЛ ржлрзБрж▓ржЯрзБрж╢рж┐_ЁЯШШ",
      "amr JaNu lagbe,Tumi ki single aso?",
      "ржЖржорж╛ржХрзЗ ржирж╛ ржжрзЗржХрзЗ ржПржХржЯрзБ ржкржбрж╝рждрзЗржУ ржмрж╕рждрзЗ рждрзЛ ржкрж╛рж░рзЛ ЁЯе║ЁЯе║",
      "рждрзЛрж░ ржмрж┐ржпрж╝рзЗ рж╣ржпрж╝ ржирж┐ ЁЭЧХЁЭЧпЁЭШЖ рж╣ржЗрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ,,ЁЯЩД",
      "ржЖржЬ ржПржХржЯрж╛ ржлрзЛржи ржирж╛ржЗ ржмрж▓рзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рждрзЗ ржкрж╛рж░рж▓рж╛ржо ржирж╛_ЁЯЩД",
      "ржЪрзМржзрзБрж░рзА рж╕рж╛рж╣рзЗржм ржЖржорж┐ ржЧрж░рж┐ржм рж╣рждрзЗ ржкрж╛рж░рж┐ЁЯШ╛ЁЯдн -ржХрж┐ржирзНрждрзБ ржмрзЬрж▓рзЛржХ ржирж╛ЁЯе╣ ЁЯШл",
      "ржЖржорж┐ ржЕржирзНржпрзЗрж░ ржЬрж┐ржирж┐рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛__ЁЯШПржУржХрзЗ",
      "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯднЁЯдП",
      "ржнрзБрж▓рзЗ ржЬрж╛ржУ ржЖржорж╛ржХрзЗ ЁЯШЮЁЯШЮ",
      "ржжрзЗржЦрж╛ рж╣рж▓рзЗ ржХрж╛ржаржЧрзЛрж▓рж╛ржк ржжрж┐ржУ..ЁЯдЧ",
      "рж╢рзБржиржмрзЛ ржирж╛ЁЯШ╝ рждрзБржорж┐ ржЖржорж╛ржХрзЗ ржкрзНрж░рзЗржо ржХрж░рж╛ржЗ ржжрж╛ржУ ржирж┐ЁЯе║ ржкржЪрж╛ рждрзБржорж┐ЁЯе║",
      "ржЖржЧрзЗ ржПржХржЯрж╛ ржЧрж╛ржи ржмрж▓рзЛ, тШ╣ ржирж╛рж╣рж▓рзЗ ржХржерж╛ ржмрж▓ржмрзЛ ржирж╛ ЁЯе║",
      "ржмрж▓рзЛ ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрзЛржорж╛рж░ ржЬржирзНржп ЁЯШЪ",
      "ржХржерж╛ ржжрзЗржУ ржЖржорж╛ржХрзЗ ржкржЯрж╛ржмрж╛...!! ЁЯШМ",
      "ржмрж╛рж░ ржмрж╛рж░ Disturb ржХрж░рзЗржЫрж┐рж╕ ржХрзЛржирзЛ ЁЯШ╛, ржЖржорж╛рж░ ржЬрж╛ржирзБ ржПрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ ЁЯШЛ",
      "ржЖржорж╛ржХрзЗ ржирж╛ ржжрзЗржХрзЗ ржПржХржЯрзБ ржкржбрж╝рждрзЗ ржмрж╕рждрзЗржУ рждрзЛ ржкрж╛рж░рзЛ ЁЯе║ЁЯе║",
      "ржмрж╛рж░ ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ ржорж╛ржерж╛ ржЧрж░ржо рж╣ржпрж╝ ржХрж┐ржирзНрждрзБ ЁЯШСЁЯШТ",
      "ржУржЗ рждрзБржорж┐ single ржирж╛?ЁЯл╡ЁЯди ЁЯШСЁЯШТ",
      "ржмрж▓рзЛ ржЬрж╛ржирзБ ЁЯШТ",
      "MeowЁЯРд",
      "ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж╛ ,рж╢рзБржиржЫрж┐ рждрзЛ ЁЯд╖ЁЯП╗тАНтЩАя╕П",
      "ржХрж┐ рж╣рж▓рзЛ, ржорж┐рж╕ ржЯрж┐рж╕ ржХрж░ржЪрзНржЫрзЛ ржирж╛ржХрж┐ ЁЯдг",
      "Bolo Babu, рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ? ЁЯЩИ",
      "ржЖржЬржХрзЗ ржЖржорж╛рж░ mржи ржнрж╛рж▓рзЛ ржирзЗржЗ ЁЯЩЙ",
    ];
    try {
      const r = tl[Math.floor(Math.random() * tl.length)];
      const body = event.body ? event.body.toLowerCase() : "";
      if (
        body.startsWith("baby") ||
        body.startsWith("bot") ||
        body.startsWith("bbu") ||
        body.startsWith("bby") ||
        body.startsWith("janu")
      ) {
        const arr = body.replace(/^\S+\s*/, "");
        if (!arr) {
          api.sendMessage(
            r,
            event.threadID,
            (error, info) => {
              global.GoatBot.onReply.set(info.messageID, {
                commandName: this.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID,
              });
            },
            event.messageID
          );
        }else{
        const { data } = await axios.get(`${rubishapi}/chat`, {
          params: { query: arr, apikey: "rubish69" },
        });
        const responseMessage = data.response;
        await api.sendMessage(
          responseMessage,
          event.threadID,
          (error, info) => {
            global.GoatBot.onReply.set(info.messageID, {
              commandName: this.config.name,
              type: "reply",
              messageID: info.messageID,
              author: event.senderID,
            });
          },
          event.messageID
        );
    }
      }
    } catch (err) {
      return api.sendMessage(
        `Error: ${err.message}`,
        event.threadID,
        event.messageID
      );
    }
  },
};
