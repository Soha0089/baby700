module.exports = {
    config: {
        name: "balance",
        aliases: ["bal", "money"],
        version: "1.3",
        author: "NTKhang + MahMUD",
        countDown: 5,
        role: 0,
        description: {
            vi: "xem s·ªë ti·ªÅn hi·ªán c√≥ c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c tag",
            en: "view your money or the money of the tagged person"
        },
        category: "economy",
        guide: {
            vi: "   {pn}: xem s·ªë ti·ªÅn c·ªßa b·∫°n"
                + "\n   {pn} <@tag>: xem s·ªë ti·ªÅn c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag",
            en: "   {pn}: view your money"
                + "\n   {pn} <@tag>: view the money of the tagged person"
        }
    },

    langs: {
        vi: {
            money: "B·∫°n ƒëang c√≥ %1$",
            moneyOf: "%1 ƒëang c√≥ %2$"
        },
        en: {
            money: ">üéÄ\nùêÅùêöùêõùê≤, ùêòùê®ùêÆùê´ ùêõùêöùê•ùêöùêßùêúùêû: %1$",
            moneyOf: ">üéÄ\n%1 ùê°ùêöùê¨ %2$"
        }
    },

    // Format big numbers with units
    formatMoney(num) {
        const units = ["", "ùêä", "ùêå", "ùêÅ", "ùêì", "ùêê", "ùêêùê¢", "ùêíùê±", "ùêíùê©", "ùêéùêú", "ùêç", "ùêÉ",
            "ùêîùêßùêùùêûùêú", "ùêÉùêÆùê®ùêùùêûùêú", "ùêìùê´ùêûùêùùêûùêú", "ùêêùêÆùêöùê≠ùê≠ùêÆùê®ùê´ùêùùêûùêú", "ùêêùêÆùê¢ùêßùêùùêûùêú",
            "ùêíùêûùê±ùêùùêûùêú", "ùêíùêûùê©ùê≠ùêûùêßùêùùêûùêú", "ùêéùêúùê≠ùê®ùêùùêûùêú", "ùêçùê®ùêØùêûùê¶ùêùùêûùêú", "ùêïùê¢ùê†",
            "ùêîùêßùêØùê¢ùê†", "ùêÉùêÆùê®ùêØùê¢ùê†", "ùêìùê´ùêûùê¨ùêØùê¢ùê†", "ùêêùêÆùêöùê≠ùê≠ùêÆùê®ùê´ùêØùê¢ùê†", "ùêêùêÆùê¢ùêßùêØùê¢ùê†",
            "ùêíùêûùê¨ùêØùê¢ùê†", "ùêíùêûùê©ùê≠ùêûùê¶ùêØùê¢ùê†", "ùêéùêúùê≠ùê®ùêØùê¢ùê†", "ùêçùê®ùêØùêûùê¶ùêØùê¢ùê†", "ùêìùê´ùê¢ùê†",
            "ùêîùêßùê≠ùê´ùê¢ùê†", "ùêÉùêÆùê®ùê≠ùê´ùê¢ùê†", "ùêÜùê®ùê®ùê†ùê®ùê•"
        ];
        let unit = 0;
        while (num >= 1000 && ++unit < units.length) num /= 1000;
        const formatted = num.toFixed(1).replace(/\.0$/, "") + units[unit];
        return toBoldNumbers(formatted);
    },

    onStart: async function ({ message, usersData, event, getLang }) {
        // Reply to another user's balance
        if (event.type == "message_reply") {
            const reply = event.messageReply;
            const userID = reply.senderID;
            const userMoney = await usersData.get(userID, "money");
            const userName = reply.senderName || await usersData.get(userID, "name") || "Unknown User";
            return message.reply(getLang("moneyOf", toBoldUnicode(userName), this.formatMoney(userMoney)));
        }

        // Mentioned users
        if (Object.keys(event.mentions).length > 0) {
            const uids = Object.keys(event.mentions);
            let msg = "";
            for (const uid of uids) {
                const userMoney = await usersData.get(uid, "money");
                const userName = event.mentions[uid].replace("@", "");
                msg += getLang("moneyOf", toBoldUnicode(userName), this.formatMoney(userMoney)) + '\n';
            }
            return message.reply(msg);
        }

        // Sender's own balance
        const userData = await usersData.get(event.senderID);
        const userName = event.senderName || await usersData.get(event.senderID, "name") || "Unknown User";
        return message.reply(getLang("money", this.formatMoney(userData.money)));
    }
};

// Convert to bold numbers
function toBoldNumbers(number) {
    const bold = { "0": "ùüé", "1": "ùüè", "2": "ùüê", "3": "ùüë", "4": "ùüí", "5": "ùüì", "6": "ùüî", "7": "ùüï", "8": "ùüñ", "9": "ùüó" };
    return number.toString().split('').map(c => bold[c] || c).join('');
}

// Convert text to bold
function toBoldUnicode(text) {
    const bold = {
        "a": "ùêö", "b": "ùêõ", "c": "ùêú", "d": "ùêù", "e": "ùêû", "f": "ùêü", "g": "ùê†", "h": "ùê°", "i": "ùê¢", "j": "ùê£",
        "k": "ùê§", "l": "ùê•", "m": "ùê¶", "n": "ùêß", "o": "ùê®", "p": "ùê©", "q": "ùê™", "r": "ùê´", "s": "ùê¨", "t": "ùê≠",
        "u": "ùêÆ", "v": "ùêØ", "w": "ùê∞", "x": "ùê±", "y": "ùê≤", "z": "ùê≥",
        "A": "ùêÄ", "B": "ùêÅ", "C": "ùêÇ", "D": "ùêÉ", "E": "ùêÑ", "F": "ùêÖ", "G": "ùêÜ", "H": "ùêá", "I": "ùêà", "J": "ùêâ",
        "K": "ùêä", "L": "ùêã", "M": "ùêå", "N": "ùêç", "O": "ùêé", "P": "ùêè", "Q": "ùêê", "R": "ùêë", "S": "ùêí", "T": "ùêì",
        "U": "ùêî", "V": "ùêï", "W": "ùêñ", "X": "ùêó", "Y": "ùêò", "Z": "ùêô",
        " ": " ", "'": "'", ",": ",", ".": ".", "-": "-"
    };
    return text.split('').map(c => bold[c] || c).join('');
	}
