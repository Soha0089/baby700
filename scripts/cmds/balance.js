module.exports = {
    config: {
        name: "balance",
	aliases: ["bal","money"],
        version: "1.2",
        author: "NTKhang",
        countDown: 5,
        role: 0,
        description: {
            vi: "xem s·ªë ti·ªÅn hi·ªán c√≥ c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c tag",
            en: "view your money or the money of the tagged person"
        },
        category: "economy",
        guide: {
            vi: "   {pn}: xem s·ªë ti·ªÅn c·ªßa b·∫°n"
                + "\n   {pn} <@tag>: xem s·ªë ti·ªÅn c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag",
            en: "   {pn}: view your money"
                + "\n   {pn} <@tag>: view the money of the tagged person"
        }
    },

    langs: {
        vi: {
            money: "B·∫°n ƒëang c√≥ %1$",
            moneyOf: "%1 ƒëang c√≥ %2$"
        },
        en: {
            money: "ùêÅùêöùêõùê≤, ùêòùê®ùêÆùê´ ùêõùêöùê•ùêöùêßùêúùêû %1$",
            moneyOf: "%1 ùê°ùêöùê¨ %2$"
        }
    },

    // Function to format money
    formatMoney(num) {
        const units = ["", "ùêä", "ùêå", "ùêÅ", "ùêì", "ùêê", "ùêêùê¢", "ùêíùê±", "ùêíùê©", "ùêéùêú", "ùêç", "ùêÉ", 
 "ùêîùêßùêùùêûùêú",
 "ùêÉùêÆùê®ùêùùêûùêú",
 "ùêìùê´ùêûùêùùêûùêú",
 "ùêêùêÆùêöùê≠ùê≠ùêÆùê®ùê´ùêùùêûùêú",
 "ùêêùêÆùê¢ùêßùêùùêûùêú",
 "ùêíùêûùê±ùêùùêûùêú",
 "ùêíùêûùê©ùê≠ùêûùêßùêùùêûùêú",
 "ùêéùêúùê≠ùê®ùêùùêûùêú",
 "ùêçùê®ùêØùêûùê¶ùêùùêûùêú",
 "ùêïùê¢ùê†",
 "ùêîùêßùêØùê¢ùê†",
 "ùêÉùêÆùê®ùêØùê¢ùê†",
 "ùêìùê´ùêûùê¨ùêØùê¢ùê†",
 "ùêêùêÆùêöùê≠ùê≠ùêÆùê®ùê´ùêØùê¢ùê†",
 "ùêêùêÆùê¢ùêßùêØùê¢ùê†",
 "ùêíùêûùê¨ùêØùê¢ùê†",
 "ùêíùêûùê©ùê≠ùêûùê¶ùêØùê¢ùê†",
 "ùêéùêúùê≠ùê®ùêØùê¢ùê†",
 "ùêçùê®ùêØùêûùê¶ùêØùê¢ùê†",
 "ùêìùê´ùê¢ùê†",
 "ùêîùêßùê≠ùê´ùê¢ùê†",
 "ùêÉùêÆùê®ùê≠ùê´ùê¢ùê†",
 "ùêÜùê®ùê®ùê†ùê®ùê•"];
        let unit = 0;
        while (num >= 1000 && ++unit < units.length) num /= 1000;
        return num.toFixed(1).replace(/\.0$/, "") + units[unit];
    },

    onStart: async function ({ message, usersData, event, getLang }) {
        // If the event is a reply to another message
        if (event.type == "message_reply") {
            const reply = event.messageReply;
            const userID = reply.senderID;  // Get the ID of the user who sent the original message
            const userMoney = await usersData.get(userID, "money");

            // Fetch the user's name (if available)
            const userName = reply.senderName || await usersData.get(userID, "name") || "Unknown User"; 

            // Respond with the money of the user who sent the original message
            return message.reply(getLang("moneyOf", userName, this.formatMoney(userMoney)));
        }

        // If there are mentions in the message
        if (Object.keys(event.mentions).length > 0) {
            const uids = Object.keys(event.mentions);
            let msg = "";
            for (const uid of uids) {
                const userMoney = await usersData.get(uid, "money");
                const userName = event.mentions[uid].replace("@", ""); // Get the name from the mention
                msg += getLang("moneyOf", userName, this.formatMoney(userMoney)) + '\n';
            }
            return message.reply(msg);
        }

        // If no mentions or replies, show the balance of the user who sent the message
        const userData = await usersData.get(event.senderID);
        const userName = event.senderName || await usersData.get(event.senderID, "name") || "Unknown User"; // Get the sender's name or fallback to "Unknown User"
        return message.reply(getLang("money", this.formatMoney(userData.money)));
    }
};
